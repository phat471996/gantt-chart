"use strict";var ganttChart=function(t){function e(t){var e=K.call(t);return e!==Q&&e!==U&&N("Expected object or array. Got: "+e),e===Q?J.items=J.items.concat(t):J.items.push(t),E(),Y}function n(t){return arguments.length?(d3.select(window).on("resize",t!==!1?z:null),J.isAutoResize=t,Y):J.isAutoResize}function a(t,e){switch(t){case"startDrag":J.startDrag.push(e);break;case"moveDrag":J.moveDrag.push(e);break;case"endDrag":J.endDrag.push(e)}return Y}function r(){var t=J.lanes.length,e=f(),n=p();P=d3.select(J.renderTo).append("svg").attr("width",J.width).attr("height",J.height).attr("class","gantt-chart"),P.append("defs").append("clipPath").attr("id","clip").append("rect").attr("width",e).attr("height",n),X=d3.behavior.drag().on("dragstart",function(t){o(this,t);for(var e=0;e<J.startDrag.length;e++)J.startDrag[e](this,t)}).on("drag",function(t){s(this,t);for(var e=0;e<J.moveDrag.length;e++)J.moveDrag[e](this,t)}).on("dragend",function(t){l(this,t);for(var e=0;e<J.endDrag.length;e++)J.endDrag[e](this,t)}),j=P.append("g").attr("transform","translate("+J.margin.left+","+J.margin.top+")").attr("width",e).attr("height",n).attr("class","main"),Z=j.append("g").attr("clip-path","url(#clip)"),M=d3.select("body").append("div").attr("class","gantt-tooltip").style("opacity",0),B=d3.time.scale().domain(v()).range([0,e]),_=d3.scale.linear().domain([0,t]).range([0,n]),O=d3.svg.axis().scale(B).orient("bottom").ticks(J.duration),C=d3.svg.axis().scale(_).orient("left").ticks(t).tickFormat(""),q=d3.behavior.zoom().x(B),j.append("g").attr("transform","translate(0,"+n+")").attr("class","main axis date").call(O),j.append("g").attr("class","main axis lane").call(C),j.append("g").attr("class","laneLabels"),P.call(q),d3.select("html").on("click",function(t){J.isEnableTooltip&&(event.target.closest("svg rect")||x())})}function i(t){var e=parseFloat(d3.select(this).attr("x")),n=parseFloat(d3.select(this).attr("width")),a=e+n;e+J.margin.left+V>=d3.event.x||a+J.margin.left-5<=d3.event.x?d3.select(this).attr("class",void 0===t["class"]?"success"+(J.isEnableItemResize?" cursor-resize":" cursor-default"):t["class"]+(J.isEnableItemResize?" cursor-resize":" cursor-default")):d3.select(this).attr("class",void 0===t["class"]?"success"+(J.isEnableDrag?" cursor-move":" cursor-default"):t["class"]+(J.isEnableDrag?" cursor-move":" cursor-default"))}function s(t,e){var n=parseFloat(d3.select(t).attr("x")),a=parseFloat(d3.select(t).attr("y")),r=parseFloat(d3.select(t).attr("width")),i=n+r,s=d3.select(t).attr("id"),l=parseFloat(d3.select("#text-"+s).attr("x"));if(J.isEnableItemResize&&e.isResize){if(n+V>=d3.event.x&&n<=i-V)return e.start=Date.parse(B.invert(n+d3.event.dx)),I(e),d3.select(t).attr("x",n+d3.event.dx).attr("width",r-d3.event.dx),void d3.select("#text-"+s).attr("x",n+(r+d3.event.dx)/2).attr("width",(r+d3.event.dx)/2);if(i-V<=d3.event.x&&n+5<=i)return e.end=Date.parse(B.invert(parseFloat(r+d3.event.dx)+parseFloat(n))),I(e),d3.select(t).attr("width",r+d3.event.dx),void d3.select("#text-"+s).attr("x",n+(r+d3.event.dx)/2).attr("width",(r+d3.event.dx)/2)}J.isEnableDrag&&e.isMove&&(e.start=Date.parse(B.invert(n+d3.event.dx)),e.end=Date.parse(B.invert(parseFloat(r+d3.event.dx)+parseFloat(n))),I(e),d3.select(t).attr("x",n+d3.event.dx).attr("y",a+d3.event.dy),d3.select("#text-"+s).attr("x",l+d3.event.dx).attr("y",a+J.itemHeight/2+d3.event.dy))}function l(t,e){if(J.isEnableDrag||J.isEnableItemResize){var n=d3.select(t),a=Math.floor(_.invert(n.attr("y"))),r=n.attr("x"),i=n.attr("id");a>=J.lanes.length&&(a=J.lanes.length-1),a<0&&(a=0),delete e.isResize,delete e.isMove,n.attr("y",_(a)),d3.select("#text-"+i).attr("y",_(a)+J.itemHeight/2),e.lane=a,e.start=Date.parse(B.invert(parseFloat(r))),e.end=Date.parse(B.invert(parseFloat(n.attr("width"))+parseFloat(r))),x(),S(),D()}}function o(t,e){if(J.isEnableDrag||J.isEnableItemResize){var n=d3.select(t).attr("class");n.includes("cursor-resize")?e.isResize=!0:n.includes("cursor-move")&&(e.isMove=!0),e.oldStart=e.start,e.oldEnd=e.end,d3.event.sourceEvent.stopPropagation()}}function d(t,e){var n;for(n in e)t.hasOwnProperty(n)&&(K.call(e[n])===U?d(t[n],e[n]):t[n]=e[n])}function c(t){return arguments.length?(J.isEnableDrag=t,D(),Y):J.isEnableDrag}function u(t){return arguments.length?(J.isEnableItemResize=t,D(),Y):J.isEnableItemResize}function h(t){return arguments.length?(J.isEnableTooltip=t,D(),Y):J.isEnableTooltip}function g(t){return arguments.length?(q.on("zoom",t?D:null),J.isEnableZoom=t,Y):J.isEnableZoom}function m(){return d3.max(J.items,function(t){return t.lane})+1||0}function f(){return J.width-J.margin.right-J.margin.left}function p(){return J.height-J.margin.top-J.margin.bottom}function v(){return[J.startTime||d3.min(J.items,function(t){return t.start}),J.endTime||d3.max(J.items,function(t){return t.end})]}function x(){M.transition().duration(500).style("opacity",0).style("display","none")}function b(t){var e=K.call(t);return arguments.length?(e!==Q&&N("Expected array. Got: "+e),J.items=t,E(),Y):J.items}function w(t){var e=K.call(t);return arguments.length?(e!==Q&&N("Expected array. Got: "+e),J.lanes=t,J.lanes.length=m()||J.lanes.length,T(!J.isShowLaneLabel),Y):J.lanes}function y(t){var e=" margin value is incorrect. All values should be numbers";return arguments.length?(void 0!==t.top&&(isNaN(t.top)&&N("'Top'"+e),J.margin.top=parseInt(t.top),j.attr("transform","translate("+J.margin.left+","+J.margin.top+")")),void 0!==t.right&&(isNaN(t.right)&&N("'Right'"+e),J.margin.right=parseInt(t.right)),void 0!==t.bottom&&(isNaN(t.bottom)&&N("'Bottom'"+e),J.margin.bottom=parseInt(t.bottom)),void 0!==t.left&&(isNaN(t.left)&&N("'Left'"+e),J.margin.left=parseInt(t.left),j.attr("transform","translate("+J.margin.left+","+J.margin.top+")")),z(),Y):J.margin}function E(){var t=m();J.lanes.length=t,B.domain(v()),C.ticks(t),_.domain([0,t]),q.x(B),D(),D()}function D(){var t;t=Z.selectAll("rect").data(J.items).attr("id",function(t){return t.id}).attr("x",function(t){return B(t.start)}).attr("y",function(t){return J.sublanes<2?_(t.lane):_(t.lane)+t.sublane*J.itemHeight}).attr("width",function(t){return B(t.end)-B(t.start)}).attr("height",J.itemHeight).attr("class",function(t){return void 0===t["class"]?"success":t["class"]}).call(X).on("mouseover",J.isEnableTooltip?I:null).on("mouseleave",J.isEnableTooltip?x:null).on("mousemove",i),t.enter().append("rect"),t.exit().remove();var e=Z.selectAll("text").data(J.items).text(function(t){return t.label}).attr("id",function(t){return"text-"+t.id}).attr("x",function(t){return B(t.start)+(B(t.end)-B(t.start))/2}).attr("y",function(t){return J.sublanes<2?_(t.lane)+J.itemHeight/2:_(t.lane)+t.sublane*J.itemHeight+J.itemHeight/2}).attr("font-size",11).attr("text-anchor","middle").attr("text-height",20).attr("fill",function(t){return void 0===t.fillTitle?"#fff main":t.fillTitle+" main"});e.enter().append("text"),e.exit().remove(),j.select("g.main.axis.date").call(O),j.select("g.main.axis.lane").call(C),x()}function z(){J.isAutoResize&&(J.width=parseInt(d3.select(J.renderTo).style("width")),J.height=parseInt(d3.select(J.renderTo).style("height")));var t=f(),e=p();B.range([0,t]),_.range([0,e]),P.attr("width",J.width),P.attr("height",J.height),P.select("defs").select("clipPath").select("rect").attr("width",t),P.select("defs").select("clipPath").select("rect").attr("height",t),j.attr("width",t),j.attr("height",e),j.select("g.main.axis.date").attr("transform","translate(0,"+p()+")"),j.select("g.laneLabels").selectAll(".laneText").data(J.lanes).attr("y",function(t,e){return _(e+.5)}),q.x(B),R(J.isShowYGrid),G(J.isShowYGrid),D()}function T(t){return arguments.length?(J.isShowLaneLabel=t,t===!1?j.selectAll(".laneText").remove():j.select("g.laneLabels").selectAll(".laneText").data(J.lanes).enter().append("text").text(function(t){return t}).attr("id",function(t,e){return"lane-"+e}).attr("x",-J.margin.left).attr("y",function(t,e){return _(e+.5)}).attr("dy",".5ex").attr("text-anchor","start").attr("class","laneText"),Y):J.isShowLaneLabel}function I(t){d3.event.defaultPrevented||(M.style("display","block").transition().duration(200).style("opacity",.9),M.html("function"==typeof t.tooltip?t.tooltip():t.tooltip).style("left",d3.event.pageX+"px").style("top",d3.event.pageY+"px"))}function S(){k();var t=H();L(J.width,t.max*J.itemHeight*J.lanes.length+J.margin.top+J.margin.bottom),J.sublanes=t.max}function R(t){if(!arguments.length)return J.isShowXGrid;var e=t!==!1?-p():-6;return O.tickSize(e,0,0),J.isShowXGrid=t,j.select("g.main.axis.date").call(O),Y}function G(t){if(!arguments.length)return J.isShowYGrid;var e=t!==!1?-f():-6;return C.tickSize(e,0,0),J.isShowYGrid=t,j.select("g.main.axis.lane").call(C),Y}function L(t,e){return arguments.length?(J.width=parseInt(t)||J.width,J.height=parseInt(e)||J.height,n(!1),z(),Y):[J.width,J.height]}function A(t){return arguments.length?(J.sublanes=t,D(),Y):J.sublanes}function F(t){return J.items.filter(function(e){return e.lane==t})}function k(){for(var t=0;t<J.lanes.length;t++)for(var e=J.items.filter(function(e){return e.lane==t}),n=0;n<e.length;n++){var a=e[n],r=J.items.find(function(t){return t.id===a.id});r.sublane=n}}function H(){var t={max:0,lanes:[]};return d3.max(J.items,function(e){e.sublane+1>t.max&&(t.max=e.sublane+1)}),t.lanes=J.items.filter(function(e){return e.sublane==t.max-1}).map(function(t){return t.lane}),t}function N(t){throw TypeError(t)}var Y,P,X,j,Z,M,O,B,C,_,q,J={},K=Object.prototype.toString,Q="[object Array]",U="[object Object]",V=15;return Y={addItems:e,autoresize:n,enableDrag:c,enableItemResize:u,enabvarooltip:h,enableZoom:g,attachEvent:a,chart:function(){return j},items:b,lanes:w,margin:y,showLaneLabel:T,showXGrid:R,showYGrid:G,size:L,sublanes:A,getItemsByLane:F,svg:function(){return P},redraw:D,renderTo:function(){return J.renderTo},resize:z,xAxis:function(){return O},xScale:function(){return B},yScale:function(){return _},yAxis:function(){return C},zoom:function(){return q}},J.items=null,J.lanes=null,J.renderTo="#gantt_chart",J.sublanes=1,J.startTime=null,J.endTime=null,J.isAutoResize=!0,J.isEnableDrag=!0,J.isEnableItemResize=!0,J.isEnableTooltip=!0,J.isEnableZoom=!0,J.isShowXGrid=!0,J.isShowYGrid=!0,J.isShowLaneLabel=!0,J.duration=20,J.startDrag=[],J.moveDrag=[],J.endDrag=[],J.height=null,J.width=null,J.itemHeight=35,J.margin={top:20,right:15,bottom:20,left:20},function(){d(J,t),J.items=J.items||[],J.lanes=J.lanes||[],J.lanes.length=m(),null===J.height&&(J.height=parseInt(d3.select(J.renderTo).style("height"))||480),null===J.width&&(J.width=parseInt(d3.select(J.renderTo).style("width"))||640),r(),n(J.isAutoResize),c(J.isEnableDrag),h(J.isEnableTooltip),g(J.isEnableZoom),T(J.isEnableTooltip),R(J.isShowXGrid),G(J.isShowYGrid),S(),D()}(),Y};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
