"use strict";var ganttChart=function(t){function e(t){var e=$.call(t);return e!==tt&&e!==et&&C("Expected object or array. Got: "+e),e===tt?(Y(t),W.items=W.items.concat(t)):(P(t),W.items.push(t)),z(),Z}function n(t){return arguments.length?(d3.select(window).on("resize",t!==!1?S:null),W.isAutoResize=t,Z):W.isAutoResize}function a(t,e){switch(t){case"startDrag":W.startDrag.push(e);break;case"moveDrag":W.moveDrag.push(e);break;case"endDrag":W.endDrag.push(e);break;case"doubleClick":W.doubleClick.push(e)}return Z}function r(){var t=W.lanes.length,e=m(),n=p();M=d3.select(W.renderTo).append("svg").attr("width",W.width).attr("height",W.height).attr("class","gantt-chart"),M.append("defs").append("clipPath").attr("id","clip").append("rect").attr("width",e).attr("height",n),q=d3.behavior.drag().on("dragstart",function(t){o(this,t);for(var e=0;e<W.startDrag.length;e++)W.startDrag[e](this,t)}).on("drag",function(t){s(this,t);for(var e=0;e<W.moveDrag.length;e++)W.moveDrag[e](this,t)}).on("dragend",function(t){l(this,t);for(var e=0;e<W.endDrag.length;e++)W.endDrag[e](this,t)}),O=M.append("g").attr("transform","translate("+W.margin.left+","+W.margin.top+")").attr("width",e).attr("height",n).attr("class","main"),_=d3.select("body").append("div").attr("class","gantt-tooltip").style("opacity",0),K=d3.time.scale().domain(v()).range([0,e]),U=d3.scale.linear().domain([0,t]).range([0,n]),J=d3.svg.axis().scale(K).orient("bottom").ticks(W.duration),Q=d3.svg.axis().scale(U).orient("left").ticks(t).tickFormat(""),V=d3.behavior.zoom().x(K),O.append("g").attr("transform","translate(0,"+n+")").attr("class","main axis date").call(J),O.append("g").attr("class","main axis lane").call(Q),B=O.append("g").attr("clip-path","url(#clip)"),O.append("g").attr("class","laneLabels"),M.call(V),d3.select("html").on("click",function(t){W.isEnableTooltip&&(event.target.closest("svg rect")||b())})}function i(t){var e=parseFloat(d3.select(this).attr("x")),n=parseFloat(d3.select(this).attr("width")),a=e+n;e+W.margin.left+at>=d3.event.x||a+W.margin.left-5<=d3.event.x?d3.select(this).attr("class",void 0===t["class"]?"success"+(W.isEnableItemResize?" cursor-resize":" cursor-default"):t["class"]+(W.isEnableItemResize?" cursor-resize":" cursor-default")):d3.select(this).attr("class",void 0===t["class"]?"success"+(W.isEnableDrag?" cursor-move":" cursor-default"):t["class"]+(W.isEnableDrag?" cursor-move":" cursor-default"))}function s(t,e){var n=parseFloat(d3.select(t).attr("x")),a=parseFloat(d3.select(t).attr("y")),r=parseFloat(d3.select(t).attr("width")),i=n+r,s=d3.select(t).attr("id"),l=parseFloat(d3.select("#text-"+s).attr("x"));if(W.isEnableItemResize&&e.isResize){if(n+at>=d3.event.x&&n<=i-at)return e.start=Date.parse(K.invert(n+d3.event.dx)),R(e),d3.select(t).attr("x",n+d3.event.dx).attr("width",r-d3.event.dx),void d3.select("#text-"+s).attr("x",n+(r+d3.event.dx)/2).attr("width",(r+d3.event.dx)/2);if(i-at<=d3.event.x&&n+5<=i)return e.end=Date.parse(K.invert(parseFloat(r+d3.event.dx)+parseFloat(n))),R(e),d3.select(t).attr("width",r+d3.event.dx),void d3.select("#text-"+s).attr("x",n+(r+d3.event.dx)/2).attr("width",(r+d3.event.dx)/2)}W.isEnableDrag&&e.isMove&&(e.start=Date.parse(K.invert(n+d3.event.dx)),e.end=Date.parse(K.invert(parseFloat(r+d3.event.dx)+parseFloat(n))),R(e),d3.select(t).attr("x",n+d3.event.dx).attr("y",a+d3.event.dy),d3.select("#text-"+s).attr("x",l+d3.event.dx).attr("y",a+W.itemHeight/2+d3.event.dy))}function l(t,e){if(W.isEnableDrag||W.isEnableItemResize){var n=d3.select(t),a=Math.floor(U.invert(n.attr("y"))),r=n.attr("x"),i=n.attr("id");a>=W.lanes.length&&(a=W.lanes.length-1),a<0&&(a=0),delete e.isResize,delete e.isMove,n.attr("y",U(a)),d3.select("#text-"+i).attr("y",U(a)+W.itemHeight/2),e.lane=a,e.start=Date.parse(K.invert(parseFloat(r))),e.end=Date.parse(K.invert(parseFloat(n.attr("width"))+parseFloat(r))),b(),j(),T()}}function o(t,e){if(W.isEnableDrag||W.isEnableItemResize){var n=d3.select(t).attr("class");n.includes("cursor-resize")?e.isResize=!0:n.includes("cursor-move")&&(e.isMove=!0),e.oldStart=e.start,e.oldEnd=e.end,d3.event.sourceEvent.stopPropagation()}}function d(t,e){var n;for(n in e)t.hasOwnProperty(n)&&($.call(e[n])===et?d(t[n],e[n]):t[n]=e[n])}function c(t){return arguments.length?(W.isEnableDrag=t,T(),Z):W.isEnableDrag}function u(t){return arguments.length?(W.isEnableItemResize=t,T(),Z):W.isEnableItemResize}function h(t){return arguments.length?(W.isEnableTooltip=t,T(),Z):W.isEnableTooltip}function g(t){return arguments.length?(V.on("zoom",t?T:null),W.isEnableZoom=t,Z):W.isEnableZoom}function f(){return W.lanes.length}function m(){return W.width-W.margin.right-W.margin.left}function p(){return W.height-W.margin.top-W.margin.bottom}function v(){return[W.startTime||d3.min(W.items,function(t){return t.start}),W.endTime||d3.max(W.items,function(t){return t.end})]}function b(){_.transition().duration(500).style("opacity",0).style("display","none")}function x(t){var e=$.call(t);return arguments.length?(e!==tt&&C("Expected array. Got: "+e),Y(t),W.items=t,z(),Z):W.items}function w(t){var e=$.call(t);return arguments.length?(e!==tt&&C("Expected array. Got: "+e),W.lanes=t,W.lanes.length=f()||W.lanes.length,L(!W.isShowLaneLabel),L(!W.isShowLaneLabel),Z):W.lanes}function y(t){var e=$.call(t);return arguments.length?(e!==nt&&C("Expected String. Got: "+e),W.lanes.push(t),E(),Z):W.lanes}function D(t){var e=" margin value is incorrect. All values should be numbers";return arguments.length?(void 0!==t.top&&(isNaN(t.top)&&C("'Top'"+e),W.margin.top=parseInt(t.top),O.attr("transform","translate("+W.margin.left+","+W.margin.top+")")),void 0!==t.right&&(isNaN(t.right)&&C("'Right'"+e),W.margin.right=parseInt(t.right)),void 0!==t.bottom&&(isNaN(t.bottom)&&C("'Bottom'"+e),W.margin.bottom=parseInt(t.bottom)),void 0!==t.left&&(isNaN(t.left)&&C("'Left'"+e),W.margin.left=parseInt(t.left),O.attr("transform","translate("+W.margin.left+","+W.margin.top+")")),S(),Z):W.margin}function E(){var t=f();K.domain(v()),Q.ticks(t),U.domain([0,t]),V.x(K),L(!W.isShowLaneLabel),L(!W.isShowLaneLabel),j(),T()}function z(){var t=f();W.lanes.length=t,K.domain(v()),Q.ticks(t),U.domain([0,t]),V.x(K),T(),T(),j()}function T(){var t;t=B.selectAll("rect").data(W.items).attr("id",function(t){return t.id}).attr("x",function(t){return K(t.start)}).attr("y",function(t){return t.lane>W.lanes.length-1&&(t.lane=W.lanes.length-1),W.sublanes<2?U(t.lane):U(t.lane)+t.sublane*W.itemHeight}).attr("width",function(t){return K(t.end)-K(t.start)}).attr("height",W.itemHeight).attr("class",function(t){return void 0===t["class"]?"success":t["class"]}).call(q).on("dblclick",function(t){for(var e=0;e<W.endDrag.length;e++)W.doubleClick[e](this,t);d3.event.stopPropagation()}).on("mouseover",W.isEnableTooltip?R:null).on("mouseleave",W.isEnableTooltip?b:null).on("mousemove",i),t.enter().append("rect"),t.exit().remove();var e=B.selectAll("text").data(W.items).text(function(t){return t.label}).attr("id",function(t){return"text-"+t.id}).attr("x",function(t){return K(t.start)+(K(t.end)-K(t.start))/2}).attr("y",function(t){return t.lane>W.lanes.length-1&&(t.lane=W.lanes.length-1),W.sublanes<2?U(t.lane)+W.itemHeight/2:U(t.lane)+t.sublane*W.itemHeight+W.itemHeight/2}).attr("font-size",11).attr("text-anchor","middle").attr("text-height",20).attr("fill",function(t){return void 0===t.fillTitle?"#fff main":t.fillTitle+" main"});e.enter().append("text"),e.exit().remove(),O.select("g.main.axis.date").call(J),O.select("g.main.axis.lane").call(Q),b()}function S(){W.isAutoResize&&(W.width=parseInt(d3.select(W.renderTo).style("width")),W.height=parseInt(d3.select(W.renderTo).style("height")));var t=m(),e=p();K.range([0,t]),U.range([0,e]),M.attr("width",W.width),M.attr("height",W.height),M.select("defs").select("clipPath").select("rect").attr("width",t),M.select("defs").select("clipPath").select("rect").attr("height",t),O.attr("width",t),O.attr("height",e),O.select("g.main.axis.date").attr("transform","translate(0,"+p()+")"),O.select("g.laneLabels").selectAll(".laneText").data(W.lanes).attr("y",function(t,e){return U(e+.5)}),V.x(K),k(W.isShowYGrid),G(W.isShowYGrid),T()}function L(t){return arguments.length?(W.isShowLaneLabel=t,t===!1?O.selectAll(".laneText").remove():O.select("g.laneLabels").selectAll(".laneText").data(W.lanes).enter().append("text").text(function(t){return t}).attr("id",function(t,e){return"lane-"+e}).attr("x",-W.margin.left).attr("y",function(t,e){return U(e+.5)}).attr("dy",".5ex").attr("text-anchor","start").attr("class","laneText"),Z):W.isShowLaneLabel}function I(t){P(t,"update");var e=W.items.filter(function(e){return e.id===t.id})[0];void 0===e&&C("This item not found"),d(e,t),z()}function R(t){d3.event.defaultPrevented||(_.style("display","block").transition().duration(200).style("opacity",.9),_.html("function"==typeof t.tooltip?t.tooltip():t.tooltip).style("left",d3.event.pageX+"px").style("top",d3.event.pageY+"px"))}function k(t){if(!arguments.length)return W.isShowXGrid;var e=t!==!1?-p():-6;return J.tickSize(e,0,0),W.isShowXGrid=t,O.select("g.main.axis.date").call(J),Z}function G(t){if(!arguments.length)return W.isShowYGrid;var e=t!==!1?-m():-6;return Q.tickSize(e,0,0),W.isShowYGrid=t,O.select("g.main.axis.lane").call(Q),Z}function A(t,e){return arguments.length?(W.width=parseInt(t)||W.width,W.height=parseInt(e)||W.height,n(!1),S(),Z):[W.width,W.height]}function F(t){return arguments.length?(W.sublanes=t,T(),Z):W.sublanes}function N(t){return W.items.filter(function(e){return e.lane==t})}function H(){var t={max:0,lanes:[]};return d3.max(W.items,function(e){e.sublane+1>t.max&&(t.max=e.sublane+1)}),t.lanes=W.items.filter(function(e){return e.sublane==t.max-1}).map(function(t){return t.lane}),t}function Y(t){for(var e=0;e<t.length;e++){var n=t[e];P(n)}}function P(t,e){"update"!==e&&(void 0===t.sublane&&(t.sublane=0),void 0===t["class"]&&(t["class"]="success"));var n=new Date(t.start),a=new Date(t.end),r=W.items.filter(function(e){return e.id===t.id});void 0===t.id&&C("Id required"),void 0===t.lane&&C("Lane required"),r.length>1&&C("Id: "+r[0].id+" expected unique"),n instanceof Date&&!isNaN(n)||C("Start date expected Date"),a instanceof Date&&!isNaN(a)||C("End date expected Date")}function j(){X();var t=H();A(W.width,t.max*W.itemHeight*W.lanes.length+W.margin.top+W.margin.bottom),F(t.max)}function X(){for(var t=0;t<W.lanes.length;t++)for(var e=W.items.filter(function(e){return e.lane==t}),n=0;n<e.length;n++){var a=e[n],r=W.items.find(function(t){return t.id===a.id});r.sublane=n}}function C(t){throw TypeError(t)}var Z,M,q,O,B,_,J,K,Q,U,V,W={},$=Object.prototype.toString,tt="[object Array]",et="[object Object]",nt="[object String]",at=15;return Z={addItems:e,autoresize:n,enableDrag:c,enableItemResize:u,enabvarooltip:h,enableZoom:g,attachEvent:a,items:x,addLanes:y,lanes:w,margin:D,showLaneLabel:L,showXGrid:k,showYGrid:G,size:A,sublanes:F,getItemsByLane:N,updateItems:I,redraw:T,resize:S,chart:function(){return O},svg:function(){return M},renderTo:function(){return W.renderTo},xAxis:function(){return J},xScale:function(){return K},yScale:function(){return U},yAxis:function(){return Q},zoom:function(){return V}},W.items=null,W.lanes=null,W.renderTo="#gantt_chart",W.sublanes=1,W.startTime=null,W.endTime=null,W.isAutoResize=!0,W.isEnableDrag=!0,W.isEnableItemResize=!0,W.isEnableTooltip=!0,W.isEnableZoom=!0,W.isShowXGrid=!0,W.isShowYGrid=!0,W.isShowLaneLabel=!0,W.duration=20,W.startDrag=[],W.moveDrag=[],W.endDrag=[],W.doubleClick=[],W.height=null,W.width=null,W.itemHeight=35,W.margin={top:20,right:15,bottom:20,left:20},function(){d(W,t),W.items=W.items||[],W.lanes=W.lanes||[],W.lanes.length=f(),null===W.height&&(W.height=parseInt(d3.select(W.renderTo).style("height"))||480),null===W.width&&(W.width=parseInt(d3.select(W.renderTo).style("width"))||640),r(),n(W.isAutoResize),c(W.isEnableDrag),h(W.isEnableTooltip),g(W.isEnableZoom),L(W.isShowLaneLabel),k(W.isShowXGrid),G(W.isShowYGrid),j(),T()}(),Z};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
